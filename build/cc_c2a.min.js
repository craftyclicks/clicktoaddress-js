/*!
 * ClickToAddress by Crafty Clicks
 *
 * @author		Crafty Clicks Limited
 * @link		https://craftyclicks.co.uk
 * @copyright	Copyright (c) 2016, Crafty Clicks Limited
 * @license		Licensed under the terms of the MIT license.
 */
function clickToAddress(a) {
    if (null != document.getElementById("cc_c2a")) throw "Already initiated";
    if ("undefined" == typeof this.preset) throw 'Incorrect way to initialize this code. use "new ClickToAddress(config);"';
    var b = this;
    this.preset(a), this.gfxModeTools = c2a_gfx_modes["mode" + this.gfxMode], this.gfxModeTools.addHtml(this), 
    this.searchObj = document.getElementById("cc_c2a"), this.resultList = this.searchObj.getElementsByClassName("c2a_results")[0], 
    this.errorObj = this.searchObj.getElementsByClassName("c2a_error")[0], this.getAvailableCountries(function() {
        if (b.serviceReady = 1, b.setCountryChange(), b.getIpLocation && "" != b.ipLocation) var a = b.ipLocation; else var a = b.defaultCountry;
        b.selectCountry(a);
    }), this.searchObj.getElementsByClassName("cc-history").length && this.setHistoryActions(), 
    ccEvent(this.searchObj, "mouseover", function() {
        b.hover = !0;
    }), ccEvent(this.searchObj, "mouseout", function() {
        b.hover = !1;
    }), ccEvent(document, "click", function() {
        b.hide();
    }), ccEvent(document, "scroll", function() {
        b.visible && b.focused && (setTimeout(function() {
            b.gfxModeTools.reposition(b, b.activeInput);
        }, 100), b.hideKeyboard());
    }), ccEvent(window, "resize", function() {
        b.visible && setTimeout(function() {
            b.gfxModeTools.reposition(b, b.activeInput);
        }, 100);
    }), ccEvent(this.resultList, "scroll", function() {
        var a = parseInt(this.scrollTop), c = parseInt(window.getComputedStyle(this, null).getPropertyValue("height"));
        b.sid > -1 && a + c == parseInt(this.scrollHeight) && b.showResultsExtra();
    }), this.getStyleSheet(), "xxxxx-xxxxx-xxxxx-xxxxx" == this.key && this.info("pre-trial"), 
    "undefined" != typeof a.dom && this.attach(a.dom);
}

function ccEvent(a, b, c) {
    a.addEventListener(b, c);
}

function ccData(a, b, c) {
    return "undefined" != typeof a && "undefined" != typeof b ? "undefined" != typeof c ? (a.setAttribute("data-" + b, JSON.stringify({
        data: c
    })), !0) : JSON.parse(a.getAttribute("data-" + b)).data : void 0;
}

function removeDiacritics(a) {
    changes || (changes = defaultDiacriticsRemovalMap);
    for (var b = 0; b < changes.length; b++) a = a.replace(changes[b].letters, changes[b].base);
    return a;
}

if (clickToAddress.prototype.search = function(a, b, c) {
    var d = this;
    if ("" !== a) {
        "undefined" == typeof b && (b = {}), this.setProgressBar(0);
        var e = {
            key: this.key,
            query: a,
            filters: b,
            country: this.activeCountry,
            fingerprint: this.fingerprint,
            integration: this.tag
        };
        "undefined" != typeof this.accessTokenOverride[this.activeCountry] && (e.key = this.accessTokenOverride[this.activeCountry]), 
        this.coords != {} && (e.coords = {}, e.coords.lat = this.coords.latitude, e.coords.lng = this.coords.longitude);
        try {
            var f = this.cacheRetrieve(e);
            return d.hideErrors(), d.searchResults = f, d.showResults(), d.focused || d.activeInput.focus(), 
            void d.setProgressBar(1);
        } catch (g) {
            if (-1 == [ "cc/cr/01", "cc/cr/02" ].indexOf(g)) throw g;
        }
        var h = this.baseURL + "find";
        request = new XMLHttpRequest(), request.open("POST", h, !0), request.setRequestHeader("Content-Type", "application/json"), 
        request.setRequestHeader("Accept", "application/json"), request.onreadystatechange = function() {
            if (4 === this.readyState && (d.sidCheck(c) || "undefined" == typeof c)) if (d.setProgressBar(1), 
            d.clear(), this.status >= 200 && this.status < 400) {
                if (console.log(c + "->" + this.status), 200 == this.status) {
                    var a = "";
                    try {
                        a = JSON.parse(this.responseText), d.hideErrors(), d.searchResults = a, d.showResults(), 
                        d.focused || d.activeInput.focus(), d.cacheStore(e, a);
                    } catch (b) {
                        d.error(9011, "JS Client side error.");
                    }
                }
            } else d.handleApiError(this);
        }, request.send(JSON.stringify(e)), request = null;
    }
}, clickToAddress.prototype.getAddressDetails = function(a) {
    var b = {
        id: a,
        country: this.activeCountry,
        key: this.key,
        fingerprint: this.fingerprint,
        integration: this.tag
    };
    "undefined" != typeof this.accessTokenOverride[this.activeCountry] && (b.key = this.accessTokenOverride[this.activeCountry]), 
    this.coords != {} && (b.coords = this.coords);
    var c = this.baseURL + "retrieve";
    request = new XMLHttpRequest(), request.open("POST", c, !0), request.setRequestHeader("Content-Type", "application/json"), 
    request.setRequestHeader("Accept", "application/json");
    var d = this;
    request.onreadystatechange = function() {
        if (4 === this.readyState) if (this.status >= 200 && this.status < 400) try {
            d.fillData(JSON.parse(this.responseText)), d.hideErrors(), d.cleanHistory();
        } catch (a) {
            d.error(9011, "JS Client side error.");
        } else d.handleApiError(this);
    }, request.send(JSON.stringify(b)), request = null;
}, clickToAddress.prototype.getAvailableCountries = function(a) {
    var b = {
        key: this.key,
        fingerprint: this.fingerprint,
        integration: this.tag
    }, c = this.baseURL + "countries";
    request = new XMLHttpRequest(), request.open("POST", c, !0), request.setRequestHeader("Content-Type", "application/json"), 
    request.setRequestHeader("Accept", "application/json");
    var d = this;
    request.onreadystatechange = function() {
        if (4 === this.readyState) {
            if (401 == this.status) return;
            if (this.status >= 200 && this.status < 400) try {
                d.serviceReady = 1;
                var b = JSON.parse(this.responseText);
                d.validCountries = b.countries, d.ipLocation = b.ip_location, d.hideErrors(), a();
            } catch (c) {
                d.error(9011, "JS Client side error.");
            } else d.handleApiError(this);
        }
    }, request.send(JSON.stringify(b));
    setTimeout(function() {
        null !== request && 4 !== request.readyState && (request.abort(), d.error(9012, "Server Unavailable. (timeout)"));
    }, 1e4);
}, clickToAddress.prototype.handleApiError = function(a) {
    -1 != [ 401, 402 ].indexOf(a.status) && (this.serviceReady = -1);
    var b = {};
    try {
        b = JSON.parse(a.responseText);
    } catch (c) {
        b = {};
    }
    "undefined" != typeof b.error && "string" == typeof b.error.status ? this.error(b.error.status, b.error.message) : this.error(9010, "Unknown Server Error.");
}, clickToAddress.prototype.cacheRetrieve = function(a) {
    if ("undefined" == typeof this.cache[a.country]) throw "cc/cr/01";
    for (var b = 0; b < this.cache[a.country].length; b++) if (this.cache[a.country][b].query == a.query && JSON.stringify(this.cache[a.country][b].filters) == JSON.stringify(a.filters)) return this.cache[a.country][b].response;
    throw "cc/cr/02";
}, clickToAddress.prototype.cacheStore = function(a, b) {
    "undefined" == typeof this.cache[a.country] && (this.cache[a.country] = []), this.cache[a.country].push({
        query: a.query,
        filters: a.filters,
        response: b
    }), this.cache[a.country].length > 100 && this.cache[a.country].shift(), this.setHistoryStep();
}, clickToAddress.prototype.history = function(a) {
    if (this.historyTools) {
        this.cachePos <= -1 && (this.cachePos = 0);
        var b = {}, c = Object.keys(this.cache[this.activeCountry]).length - 1;
        0 === a ? (this.cachePos++, b = this.cache[this.activeCountry][c - this.cachePos]) : (this.cachePos--, 
        b = this.cache[this.activeCountry][c - this.cachePos]), this.setHistoryStep(), this.activeInput.value = b.query, 
        this.search(b.query, b.filters);
    }
}, clickToAddress.prototype.setHistoryActions = function() {
    if (this.historyTools) {
        var a = this, b = this.searchObj.getElementsByClassName("back")[0], c = this.searchObj.getElementsByClassName("forward")[0];
        ccEvent(b, "click", function() {
            "back" == b.className && a.history(0);
        }), ccEvent(c, "click", function() {
            "forward" == c.className && a.history(1);
        });
    }
}, clickToAddress.prototype.setHistoryStep = function() {
    if (this.historyTools) {
        var a = this.searchObj.getElementsByClassName("back")[0], b = this.searchObj.getElementsByClassName("forward")[0];
        a.className = "back", b.className = "forward";
        var c = 0;
        ("undefined" == typeof this.cache[this.activeCountry] || this.cachePos >= Object.keys(this.cache[this.activeCountry]).length - 1 || Object.keys(this.cache[this.activeCountry]).length <= 1) && (a.className = "back disabled", 
        c++), ("undefined" == typeof this.cache[this.activeCountry] || this.cachePos <= 0 || Object.keys(this.cache[this.activeCountry]).length <= 1) && (b.className = "forward disabled", 
        c++);
        var d = this.searchObj.getElementsByClassName("c2a_logo");
        d.length && (2 == c ? d[0].className = "c2a_logo" : d[0].className = "c2a_logo hidden");
    }
}, clickToAddress.prototype.hideHistory = function() {
    var a = this.searchObj.getElementsByClassName("back")[0], b = this.searchObj.getElementsByClassName("forward")[0];
    a.className = "back disabled", b.className = "forward disabled";
}, clickToAddress.prototype.cleanHistory = function() {
    if (!(this.cachePos <= 0 || "undefined" == typeof this.cache[this.activeCountry])) {
        var a = Object.keys(this.cache[this.activeCountry]).length - this.cachePos;
        this.cache[this.activeCountry].splice(a, this.cachePos), this.cachePos = -1, this.setHistoryStep();
    }
}, clickToAddress.prototype.info = function(a, b) {
    var c = this.searchObj.getElementsByClassName("infoBar")[0];
    switch (a) {
      case "pre-trial":
        c.className += " infoActive infoTrial", c.innerHTML = "<h5>Get a trial account today!</h5><p>You can test the functionality by using our test addresses.</p>";
        break;

      case "too-many-results":
        c.className += " infoActive infoWarning", c.innerHTML = b + " results found. Please provide more address details.";
        break;

      case "no-results":
        c.className += " infoActive infoWarning", c.innerHTML = "No results found.";
        break;

      default:
        c.className = "infoBar";
    }
}, clickToAddress.prototype.setFingerPrint = function() {
    var a = 1e15, b = 1e16, c = Math.floor(Math.random() * (b - a + 1) + a);
    this.fingerprint = c.toString(16);
}, clickToAddress.prototype.getFingerPrint = function() {
    return this.fingerprint;
}, clickToAddress.prototype.fillData = function(a) {
    if ("undefined" != typeof this.activeDom.country) {
        var b = this.activeDom.country.getElementsByTagName("option");
        if (b.length) {
            for (var c = "", d = 0; d < b.length && "" == c; d++) {
                if (b[d].innerHTML == this.validCountries[this.activeCountryId].country_name) {
                    c = b[d].value;
                    break;
                }
                if (b[d].value == this.activeCountry) {
                    c = b[d].value;
                    break;
                }
            }
            this.activeDom.country.value = c;
        } else this.activeDom.country.value = this.validCountries[this.activeCountryId].country_name;
    }
    if ("undefined" != typeof this.activeDom.line_1) {
        var e = [];
        if (this.activeDom.line_1.value = a.result.line_1, "undefined" != typeof this.activeDom.line_2 ? this.activeDom.line_2.value = a.result.line_2 : "" != a.result.line_2 && e.push(a.result.line_2), 
        "undefined" != typeof this.activeDom.company ? this.activeDom.company.value = a.result.company_name : "" != a.result.company_name && (this.activeDom.line_1.value = a.result.company_name + ", " + this.activeDom.line_1.value), 
        "undefined" != typeof this.activeDom.postcode ? this.activeDom.postcode.value = a.result.postal_code : e.push(a.result.postal_code), 
        "undefined" != typeof this.activeDom.town ? "" != a.result.locality ? this.activeDom.town.value = a.result.locality : this.activeDom.town.value = a.result.dependent_locality : "" != a.result.locality ? e.push(a.result.locality) : e.push(a.result.dependent_locality), 
        "" != a.result.province) {
            var f = {
                province: a.result.province,
                code: a.result.province_code,
                name: a.result.province_name
            };
            "function" == typeof this.onSetCounty ? this.onSetCounty(this, this.activeDom, f) : "undefined" != typeof this.activeDom.county && this.setCounty(this.activeDom.county, f);
        }
        e.length && ("undefined" != typeof this.activeDom.line_2 ? this.activeDom.line_2.value += ", " + e.join(", ") : this.activeDom.line_1.value += ", " + e.join(", "));
    }
    "function" == typeof this.onResultSelected && this.onResultSelected(this, this.activeDom, a.result), 
    this.hide(!0);
}, clickToAddress.prototype.setCounty = function(a, b) {
    var c = b.name;
    "" == c && (c = b.province), provinceMatchText = removeDiacritics(c).toLowerCase();
    var d = b.code;
    if ("" == d && (d = b.province), "SELECT" == a.tagName) {
        var e = a.getElementsByTagName("option");
        if (e.length) {
            for (var f = 0, g = 0; g < e.length; g++) if (removeDiacritics(e[g].innerHTML).toLowerCase() == provinceMatchText) {
                d = e[g].value, f++;
                break;
            }
            if (!f) {
                for (var h = {
                    id: 0,
                    rank: 0
                }, g = 0; g < e.length; g++) {
                    for (var i = removeDiacritics(e[g].innerHTML).toLowerCase(), j = 0, k = 0; k < i.length; k++) i[k] == provinceMatchText[k] && j++;
                    j > h.rank && (h.rank = j, h.id = g);
                }
                d = e[h.id].value;
            }
            a.value = d;
        }
    } else a.value = c;
}, clickToAddress.prototype.showResults = function(a) {
    this.scrollPosition = 0, this.resetSelector(), this.info("clear");
    for (var b = "", c = this.searchResults.results.length - this.scrollLimit * this.scrollPosition, d = 0; c > d && d < this.scrollLimit; d++) b += "<li></li>";
    this.resultList.innerHTML = b;
    var e = this.resultList.getElementsByTagName("li");
    this.resultList.scrollTop = 0;
    for (var f = this, d = 0; d < e.length && d < this.scrollLimit; d++) {
        var g = this.searchResults.results[d], h = "<div>";
        "string" == typeof g.labels[0] && "" !== g.labels[0] && (h += "<span>" + g.labels[0] + "</span>"), 
        "string" == typeof g.labels[1] && "" !== g.labels[1] && (h += '<span class="light">' + g.labels[1] + "</span>"), 
        "number" == typeof g.count && g.count > 1 && (h += '<span class="light">(' + g.count + " more)</span>"), 
        h += "</div>", e[d].innerHTML = h, e[d].setAttribute("title", g.labels.join(", ")), 
        "number" == typeof g.count && g.count > 1 && (e[d].className = "cc-filter"), "number" == typeof g.id ? ccData(e[d], "key", g.id) : ccData(e[d], "key", 0), 
        "undefined" != typeof g.filters ? ccData(e[d], "filters", g.filters) : ccData(e[d], "filters", null), 
        "undefined" != typeof g.query ? ccData(e[d], "query", g.query) : ccData(e[d], "query", null);
    }
    for (var d = 0; d < e.length; d++) ccEvent(e[d], "click", function() {
        f.select(this);
    });
    0 === this.searchResults.results.length ? (this.info("no-results"), this.hasContent = !1) : this.hasContent = !0;
}, clickToAddress.prototype.showResultsExtra = function() {
    this.scrollPosition++;
    for (var a = this.scrollLimit * this.scrollPosition, b = "", c = this.searchResults.results.length - a, d = 0; c > d && d < this.scrollLimit; d++) b += "<li></li>";
    this.resultList.innerHTML += b;
    for (var e = this.resultList.getElementsByTagName("li"), f = this, d = a; d < e.length; d++) {
        var g = this.searchResults.results[d], h = "<div>";
        "string" == typeof g.labels[0] && "" !== g.labels[0] && (h += "<span>" + g.labels[0] + "</span>"), 
        "string" == typeof g.labels[1] && "" !== g.labels[1] && (h += '<span class="light">' + g.labels[1] + "</span>"), 
        "number" == typeof g.count && g.count > 1 && (h += '<span class="light">(' + g.count + " more)</span>"), 
        h += "</div>", e[d].innerHTML = h, e[d].setAttribute("title", g.labels.join(", ")), 
        "number" == typeof g.count && g.count > 1 && (e[d].className = "cc-filter"), "number" == typeof g.id ? ccData(e[d], "key", g.id) : ccData(e[d], "key", 0), 
        "undefined" != typeof g.filters ? ccData(e[d], "filters", g.filters) : ccData(e[d], "filters", null), 
        "undefined" != typeof g.query ? ccData(e[d], "query", g.query) : ccData(e[d], "query", null);
    }
    for (var d = 0; d < e.length; d++) ccEvent(e[d], "click", function() {
        f.select(this);
    });
}, clickToAddress.prototype.select = function(a) {
    return this.resetSelector(), this.cleanHistory(), a.key = ccData(a, "key"), a.filters = ccData(a, "filters"), 
    a.query = ccData(a, "query"), 0 !== a.key ? (this.getAddressDetails(a.key), this.hide(), 
    void this.loseFocus()) : null !== a.filters || null !== a.query ? (this.search(this.activeInput.value, a.filters), 
    this.getFocus(), null !== a.query && (this.activeInput.value = a.query), void (this.activeFilters = a.filters)) : "deadend" != a.className ? (this.search(this.activeInput.value), 
    void this.getFocus()) : void 0;
}, clickToAddress.prototype.getGeo = function() {
    var a = this;
    navigator.geolocation && navigator.geolocation.getCurrentPosition(function(b) {
        a.coords = b.coords, a.showGeo();
    });
}, clickToAddress.prototype.changeCountry = function(a) {
    this.hideHistory(), this.resetSelector();
    for (var b = "", c = this.validCountries.length, d = 0; c > d; d++) b += "<li></li>";
    this.resultList.innerHTML = b;
    var e = this.resultList.getElementsByTagName("li");
    this.resultList.scrollTop = 0;
    for (var f = this, g = 0, d = 0; d < e.length; d++) {
        var h = this.validCountries[d + g], i = "";
        if ("undefined" != typeof a && "" !== a) {
            for (var j = !1, k = 0; !j && k < Object.keys(h).length; k++) {
                var l = h[Object.keys(h)[k]];
                if ("array" != typeof l) {
                    var m = l.toString().toLowerCase();
                    0 === m.indexOf(a.toLowerCase()) && (j = !0);
                } else for (var n = 0; !j && n < l.length; n++) {
                    var m = l[n].toString().toLowerCase();
                    0 === m.indexOf(a.toLowerCase()) && (j = !0);
                }
            }
            j ? i = '<span class="cc-flag cc-flag-' + h.short_code + '"></span><span>' + h.country_name + "</span>" : (e[d].parentNode.removeChild(e[d]), 
            d--, g++);
        } else var i = '<span class="cc-flag cc-flag-' + h.short_code + '"></span><span>' + h.country_name + "</span>";
        "" != i && (e[d].innerHTML = i, e[d].setAttribute("countryCode", h.code), f.hasContent = !0, 
        ccEvent(e[d], "click", function() {
            f.selectCountry(this.getAttribute("countryCode"));
        }));
    }
    this.sid = -1, this.getFocus();
}, clickToAddress.prototype.selectCountry = function(a) {
    var b = this;
    this.clear();
    var c = this.searchObj.getElementsByClassName("country_img")[0], d = {};
    this.activeCountryId = 0;
    for (var e = 0; e < this.validCountries.length; e++) if (this.validCountries[e].code == a) {
        d = this.validCountries[e], this.activeCountryId = e;
        break;
    }
    if (c.setAttribute("class", "country_img cc-flag cc-flag-" + d.short_code), this.activeCountry = a, 
    this.sid = 0, this.getFocus(), "undefined" != typeof this.activeInput.value && "undefined" != typeof this.lastSearch) {
        this.activeInput.value = this.lastSearch, this.activeFilters = {}, this.lastSearch = this.value;
        var f = new Date().getTime() / 1e3;
        this.sid = f, setTimeout(function() {
            b.sidCheck(f) && ("" !== b.activeInput.value ? (b.search(b.activeInput.value, b.activeFilters, f), 
            b.cleanHistory()) : b.clear());
        }, 500), this.gfxModeTools.reposition(this, this.activeInput);
    }
    this.setHistoryStep(), this.setPlaceholder(0);
}, clickToAddress.prototype.setCountryChange = function() {
    if (0 !== this.enabledCountries.length) for (var a = 0; a < this.validCountries.length; a++) {
        var b = this.validCountries[a];
        switch (this.countryMatchWith) {
          case "iso_2":
            -1 == this.enabledCountries.indexOf(b.code) && (this.validCountries.splice(a, 1), 
            a--);
            break;

          default:
            for (var c = !1, d = 0; !c && d < Object.keys(b).length; d++) {
                var e = b[Object.keys(b)[d]];
                if ("array" != typeof e) for (var f = e.toString().toLowerCase(), g = 0; g < this.enabledCountries.length; g++) 0 === f.indexOf(this.enabledCountries[g].toLowerCase()) && (c = !0); else for (var g = 0; g < this.enabledCountries.length; g++) for (var h = 0; h < e.length; h++) 0 === f.indexOf(this.enabledCountries[g].toLowerCase()) && (c = !0);
            }
            c || (this.validCountries.splice(a, 1), a--);
        }
    }
    var i = this.searchObj.getElementsByClassName("country_btn")[0], j = this;
    ccEvent(i, "click", function() {
        -1 != j.sid ? (j.setPlaceholder(1), j.changeCountry(), j.activeInput.value = "", 
        j.hasContent = !0) : (j.setPlaceholder(0), j.sid = 0, j.hide(!0), j.getFocus(), 
        j.hover = !0);
    });
}, clickToAddress.prototype.sidCheck = function(a) {
    return a == this.sid;
}, clickToAddress.prototype.destroy = function() {}, "undefined" == typeof c2a_gfx_modes) var c2a_gfx_modes = {};

if (c2a_gfx_modes.mode1 = {
    addHtml: function(a) {
        var b = document.createElement("DIV");
        b.className = "c2a_mode" + a.gfxMode + " c2a_" + a.style.ambient + " c2a_accent_" + a.style.accent, 
        b.id = "cc_c2a";
        var c = '<div class="cc-history"><div class="back disabled"></div>';
        c += '<div class="forward disabled"></div></div>';
        var d = '<div class="mainbar">';
        d += '<div class="country_btn"><div class="country_img"></div><span>' + a.texts.country_button + "</span></div>", 
        a.historyTools === !0 && (d += c), a.showLogo && (d += '<div class="c2a_logo"></div>'), 
        d += "</div>";
        var e = '<div class="progressBar"></div>', f = '<div class="infoBar"></div>', g = e + d + f, h = "c2a_footer", i = "";
        this.showLogo && (g += '<div class="c2a_logo"></div>', i = ' title="Provided by Crafty Clicks"');
        var j = '<div class="c2a_error"></div><ul class="c2a_results"></ul><div class="' + h + '"' + i + ">" + g + "</div>";
        b.innerHTML = j, document.body.appendChild(b);
    },
    reposition: function(a, b) {
        var c = b.getBoundingClientRect(), d = document.body.getBoundingClientRect(), e = c.top - d.top + b.offsetHeight - 3;
        leftOffset = c.left - d.left, "" !== document.body.style.paddingLeft && (leftOffset += parseInt(document.body.style.paddingLeft));
        var f = parseInt(window.getComputedStyle(document.getElementsByTagName("html")[0]).getPropertyValue("margin-top"));
        f += parseInt(window.getComputedStyle(document.getElementsByTagName("html")[0]).getPropertyValue("padding-top")), 
        e += f, d.bottom < a.searchObj.offsetHeight && (e -= b.offsetHeight + a.searchObj.offsetHeight), 
        a.searchObj.style.left = leftOffset + 3 + "px", a.searchObj.style.top = e + "px", 
        a.searchObj.style.width = b.offsetWidth - 6 + "px";
    }
}, "undefined" == typeof c2a_gfx_modes) var c2a_gfx_modes = {};

c2a_gfx_modes.mode2 = {
    addHtml: function(a) {
        var b = document.createElement("DIV");
        b.className = "c2a_mode" + a.gfxMode + " c2a_" + a.style.ambient + " c2a_accent_" + a.style.accent, 
        b.id = "cc_c2a";
        var c = '<div class="mainbar">';
        c += '<div class="country_btn"><div class="country_img"></div><span>' + a.texts.country_button + "</span></div>", 
        a.historyTools === !0 && (c += '<div class="cc-history"><div class="back disabled"></div>', 
        c += '<div class="forward disabled"></div></div>'), a.showLogo && (c += '<div class="c2a_logo"></div>'), 
        c += "</div>";
        var d = '<div class="progressBar"></div>', e = '<div class="infoBar"></div>', f = "c2a_footer", g = "", h = d + e, i = c + '<div class="c2a_error"></div><ul class="c2a_results"></ul><div class="' + f + '"' + g + ">" + h + "</div>";
        b.innerHTML = i, document.body.appendChild(b);
    },
    reposition: function(a, b) {
        var c = 22, d = b.getBoundingClientRect(), e = document.body.getBoundingClientRect(), f = d.top - e.top - (c + 10);
        leftOffset = d.left - e.left + document.body.style.paddingLeft;
        var g = parseInt(window.getComputedStyle(document.getElementsByTagName("html")[0]).getPropertyValue("margin-top"));
        g += parseInt(window.getComputedStyle(document.getElementsByTagName("html")[0]).getPropertyValue("padding-top")), 
        f += g, a.searchObj.style.left = leftOffset - 5 + "px", a.searchObj.style.top = f + "px", 
        a.searchObj.style.width = b.offsetWidth + 10 + "px", a.searchObj.getElementsByClassName("mainbar")[0].style.marginBottom = b.offsetHeight + 10 + "px";
        for (var h = "c2a_active", i = document.getElementsByClassName(h), j = 0; j < i.length; j++) i[j].className = i[j].className.replace(" " + h, "");
        b.className += " " + h;
    }
}, clickToAddress.prototype.preset = function(a) {
    this.serviceReady = 0, this.activeCountry = "", this.hover = !1, this.visible = !1, 
    this.focused = !1, this.hasContent = !1, this.keyboardHideInProgress = !1, this.coords = 0, 
    this.activeDom = {}, this.domLib = [], this.searchResults = {}, this.searchObj = {}, 
    this.selectorPos = -1, this.activeInput = "init", this.sid = 0, this.cache = {}, 
    this.cachePos = -1, this.scrollPosition = 0, this.scrollLimit = 20, this.activeFilters = {}, 
    this.lastSearch = "", this.funcStore = {}, this.setCfg(a, "gfxMode", 1), this.setCfg(a, "baseURL", "https://api.craftyclicks.co.uk/address/1.0", "relay"), 
    "/" != this.baseURL[this.baseURL.length] && (this.baseURL += "/"), this.setCfg(a, "key", "xxxxx-xxxxx-xxxxx-xxxxx", "accessToken"), 
    this.setCfg(a, "defaultCountry", "gbr"), this.setCfg(a, "enabledCountries", []), 
    this.setCfg(a, "style", {
        ambient: "light",
        accent: "default"
    }), this.setCfg(a, "domMode", "name"), this.setCfg(a, "placeholders", !0), this.setCfg(a, "onResultSelected"), 
    this.setCfg(a, "onCountryChange"), this.setCfg(a, "onSetCounty"), this.setCfg(a, "onError"), 
    this.setCfg(a, "showLogo", !0), this.setCfg(a, "historyTools", !0), this.setCfg(a, "getIpLocation", !0), 
    this.setCfg(a, "accessTokenOverride", {}), this.setupText(a.texts), this.setCfg(a, "countryMatchWith", "iso_3"), 
    this.setCfg(a, "tag", ""), this.setCfg(a, "cssPath", "cc_c2a.min.css"), this.setFingerPrint();
}, cc_debug = !1, clickToAddress.prototype.setupText = function(a) {
    if (this.texts = {
        default_placeholder: "Start with post/zip code or street",
        country_placeholder: "Type here to search for a country",
        country_button: "Change Country",
        generic_error: "An error occured. Please enter your address manually",
        no_results: "No results found"
    }, "undefined" != typeof a) for (var b = Object.keys(this.texts), c = 0; c < b.length; c++) "undefined" != typeof a[b[c]] && "" != a[b[c]] && (this.texts[b[c]] = a[b[c]]);
}, clickToAddress.prototype.setCfg = function(a, b, c, d) {
    "undefined" == typeof d && (d = b), "undefined" != typeof a[d] && "" !== a[d] ? this[b] = a[d] : this[b] = c;
};

var defaultDiacriticsRemovalMap = [ {
    base: "A",
    letters: /[\u0041\u24B6\uFF21\u00C0\u00C1\u00C2\u1EA6\u1EA4\u1EAA\u1EA8\u00C3\u0100\u0102\u1EB0\u1EAE\u1EB4\u1EB2\u0226\u01E0\u00C4\u01DE\u1EA2\u00C5\u01FA\u01CD\u0200\u0202\u1EA0\u1EAC\u1EB6\u1E00\u0104\u023A\u2C6F]/g
}, {
    base: "AA",
    letters: /[\uA732]/g
}, {
    base: "AE",
    letters: /[\u00C6\u01FC\u01E2]/g
}, {
    base: "AO",
    letters: /[\uA734]/g
}, {
    base: "AU",
    letters: /[\uA736]/g
}, {
    base: "AV",
    letters: /[\uA738\uA73A]/g
}, {
    base: "AY",
    letters: /[\uA73C]/g
}, {
    base: "B",
    letters: /[\u0042\u24B7\uFF22\u1E02\u1E04\u1E06\u0243\u0182\u0181]/g
}, {
    base: "C",
    letters: /[\u0043\u24B8\uFF23\u0106\u0108\u010A\u010C\u00C7\u1E08\u0187\u023B\uA73E]/g
}, {
    base: "D",
    letters: /[\u0044\u24B9\uFF24\u1E0A\u010E\u1E0C\u1E10\u1E12\u1E0E\u0110\u018B\u018A\u0189\uA779]/g
}, {
    base: "DZ",
    letters: /[\u01F1\u01C4]/g
}, {
    base: "Dz",
    letters: /[\u01F2\u01C5]/g
}, {
    base: "E",
    letters: /[\u0045\u24BA\uFF25\u00C8\u00C9\u00CA\u1EC0\u1EBE\u1EC4\u1EC2\u1EBC\u0112\u1E14\u1E16\u0114\u0116\u00CB\u1EBA\u011A\u0204\u0206\u1EB8\u1EC6\u0228\u1E1C\u0118\u1E18\u1E1A\u0190\u018E]/g
}, {
    base: "F",
    letters: /[\u0046\u24BB\uFF26\u1E1E\u0191\uA77B]/g
}, {
    base: "G",
    letters: /[\u0047\u24BC\uFF27\u01F4\u011C\u1E20\u011E\u0120\u01E6\u0122\u01E4\u0193\uA7A0\uA77D\uA77E]/g
}, {
    base: "H",
    letters: /[\u0048\u24BD\uFF28\u0124\u1E22\u1E26\u021E\u1E24\u1E28\u1E2A\u0126\u2C67\u2C75\uA78D]/g
}, {
    base: "I",
    letters: /[\u0049\u24BE\uFF29\u00CC\u00CD\u00CE\u0128\u012A\u012C\u0130\u00CF\u1E2E\u1EC8\u01CF\u0208\u020A\u1ECA\u012E\u1E2C\u0197]/g
}, {
    base: "J",
    letters: /[\u004A\u24BF\uFF2A\u0134\u0248]/g
}, {
    base: "K",
    letters: /[\u004B\u24C0\uFF2B\u1E30\u01E8\u1E32\u0136\u1E34\u0198\u2C69\uA740\uA742\uA744\uA7A2]/g
}, {
    base: "L",
    letters: /[\u004C\u24C1\uFF2C\u013F\u0139\u013D\u1E36\u1E38\u013B\u1E3C\u1E3A\u0141\u023D\u2C62\u2C60\uA748\uA746\uA780]/g
}, {
    base: "LJ",
    letters: /[\u01C7]/g
}, {
    base: "Lj",
    letters: /[\u01C8]/g
}, {
    base: "M",
    letters: /[\u004D\u24C2\uFF2D\u1E3E\u1E40\u1E42\u2C6E\u019C]/g
}, {
    base: "N",
    letters: /[\u004E\u24C3\uFF2E\u01F8\u0143\u00D1\u1E44\u0147\u1E46\u0145\u1E4A\u1E48\u0220\u019D\uA790\uA7A4]/g
}, {
    base: "NJ",
    letters: /[\u01CA]/g
}, {
    base: "Nj",
    letters: /[\u01CB]/g
}, {
    base: "O",
    letters: /[\u004F\u24C4\uFF2F\u00D2\u00D3\u00D4\u1ED2\u1ED0\u1ED6\u1ED4\u00D5\u1E4C\u022C\u1E4E\u014C\u1E50\u1E52\u014E\u022E\u0230\u00D6\u022A\u1ECE\u0150\u01D1\u020C\u020E\u01A0\u1EDC\u1EDA\u1EE0\u1EDE\u1EE2\u1ECC\u1ED8\u01EA\u01EC\u00D8\u01FE\u0186\u019F\uA74A\uA74C]/g
}, {
    base: "OI",
    letters: /[\u01A2]/g
}, {
    base: "OO",
    letters: /[\uA74E]/g
}, {
    base: "OU",
    letters: /[\u0222]/g
}, {
    base: "P",
    letters: /[\u0050\u24C5\uFF30\u1E54\u1E56\u01A4\u2C63\uA750\uA752\uA754]/g
}, {
    base: "Q",
    letters: /[\u0051\u24C6\uFF31\uA756\uA758\u024A]/g
}, {
    base: "R",
    letters: /[\u0052\u24C7\uFF32\u0154\u1E58\u0158\u0210\u0212\u1E5A\u1E5C\u0156\u1E5E\u024C\u2C64\uA75A\uA7A6\uA782]/g
}, {
    base: "S",
    letters: /[\u0053\u24C8\uFF33\u1E9E\u015A\u1E64\u015C\u1E60\u0160\u1E66\u1E62\u1E68\u0218\u015E\u2C7E\uA7A8\uA784]/g
}, {
    base: "T",
    letters: /[\u0054\u24C9\uFF34\u1E6A\u0164\u1E6C\u021A\u0162\u1E70\u1E6E\u0166\u01AC\u01AE\u023E\uA786]/g
}, {
    base: "TZ",
    letters: /[\uA728]/g
}, {
    base: "U",
    letters: /[\u0055\u24CA\uFF35\u00D9\u00DA\u00DB\u0168\u1E78\u016A\u1E7A\u016C\u00DC\u01DB\u01D7\u01D5\u01D9\u1EE6\u016E\u0170\u01D3\u0214\u0216\u01AF\u1EEA\u1EE8\u1EEE\u1EEC\u1EF0\u1EE4\u1E72\u0172\u1E76\u1E74\u0244]/g
}, {
    base: "V",
    letters: /[\u0056\u24CB\uFF36\u1E7C\u1E7E\u01B2\uA75E\u0245]/g
}, {
    base: "VY",
    letters: /[\uA760]/g
}, {
    base: "W",
    letters: /[\u0057\u24CC\uFF37\u1E80\u1E82\u0174\u1E86\u1E84\u1E88\u2C72]/g
}, {
    base: "X",
    letters: /[\u0058\u24CD\uFF38\u1E8A\u1E8C]/g
}, {
    base: "Y",
    letters: /[\u0059\u24CE\uFF39\u1EF2\u00DD\u0176\u1EF8\u0232\u1E8E\u0178\u1EF6\u1EF4\u01B3\u024E\u1EFE]/g
}, {
    base: "Z",
    letters: /[\u005A\u24CF\uFF3A\u0179\u1E90\u017B\u017D\u1E92\u1E94\u01B5\u0224\u2C7F\u2C6B\uA762]/g
}, {
    base: "a",
    letters: /[\u0061\u24D0\uFF41\u1E9A\u00E0\u00E1\u00E2\u1EA7\u1EA5\u1EAB\u1EA9\u00E3\u0101\u0103\u1EB1\u1EAF\u1EB5\u1EB3\u0227\u01E1\u00E4\u01DF\u1EA3\u00E5\u01FB\u01CE\u0201\u0203\u1EA1\u1EAD\u1EB7\u1E01\u0105\u2C65\u0250]/g
}, {
    base: "aa",
    letters: /[\uA733]/g
}, {
    base: "ae",
    letters: /[\u00E6\u01FD\u01E3]/g
}, {
    base: "ao",
    letters: /[\uA735]/g
}, {
    base: "au",
    letters: /[\uA737]/g
}, {
    base: "av",
    letters: /[\uA739\uA73B]/g
}, {
    base: "ay",
    letters: /[\uA73D]/g
}, {
    base: "b",
    letters: /[\u0062\u24D1\uFF42\u1E03\u1E05\u1E07\u0180\u0183\u0253]/g
}, {
    base: "c",
    letters: /[\u0063\u24D2\uFF43\u0107\u0109\u010B\u010D\u00E7\u1E09\u0188\u023C\uA73F\u2184]/g
}, {
    base: "d",
    letters: /[\u0064\u24D3\uFF44\u1E0B\u010F\u1E0D\u1E11\u1E13\u1E0F\u0111\u018C\u0256\u0257\uA77A]/g
}, {
    base: "dz",
    letters: /[\u01F3\u01C6]/g
}, {
    base: "e",
    letters: /[\u0065\u24D4\uFF45\u00E8\u00E9\u00EA\u1EC1\u1EBF\u1EC5\u1EC3\u1EBD\u0113\u1E15\u1E17\u0115\u0117\u00EB\u1EBB\u011B\u0205\u0207\u1EB9\u1EC7\u0229\u1E1D\u0119\u1E19\u1E1B\u0247\u025B\u01DD]/g
}, {
    base: "f",
    letters: /[\u0066\u24D5\uFF46\u1E1F\u0192\uA77C]/g
}, {
    base: "g",
    letters: /[\u0067\u24D6\uFF47\u01F5\u011D\u1E21\u011F\u0121\u01E7\u0123\u01E5\u0260\uA7A1\u1D79\uA77F]/g
}, {
    base: "h",
    letters: /[\u0068\u24D7\uFF48\u0125\u1E23\u1E27\u021F\u1E25\u1E29\u1E2B\u1E96\u0127\u2C68\u2C76\u0265]/g
}, {
    base: "hv",
    letters: /[\u0195]/g
}, {
    base: "i",
    letters: /[\u0069\u24D8\uFF49\u00EC\u00ED\u00EE\u0129\u012B\u012D\u00EF\u1E2F\u1EC9\u01D0\u0209\u020B\u1ECB\u012F\u1E2D\u0268\u0131]/g
}, {
    base: "j",
    letters: /[\u006A\u24D9\uFF4A\u0135\u01F0\u0249]/g
}, {
    base: "k",
    letters: /[\u006B\u24DA\uFF4B\u1E31\u01E9\u1E33\u0137\u1E35\u0199\u2C6A\uA741\uA743\uA745\uA7A3]/g
}, {
    base: "l",
    letters: /[\u006C\u24DB\uFF4C\u0140\u013A\u013E\u1E37\u1E39\u013C\u1E3D\u1E3B\u017F\u0142\u019A\u026B\u2C61\uA749\uA781\uA747]/g
}, {
    base: "lj",
    letters: /[\u01C9]/g
}, {
    base: "m",
    letters: /[\u006D\u24DC\uFF4D\u1E3F\u1E41\u1E43\u0271\u026F]/g
}, {
    base: "n",
    letters: /[\u006E\u24DD\uFF4E\u01F9\u0144\u00F1\u1E45\u0148\u1E47\u0146\u1E4B\u1E49\u019E\u0272\u0149\uA791\uA7A5]/g
}, {
    base: "nj",
    letters: /[\u01CC]/g
}, {
    base: "o",
    letters: /[\u006F\u24DE\uFF4F\u00F2\u00F3\u00F4\u1ED3\u1ED1\u1ED7\u1ED5\u00F5\u1E4D\u022D\u1E4F\u014D\u1E51\u1E53\u014F\u022F\u0231\u00F6\u022B\u1ECF\u0151\u01D2\u020D\u020F\u01A1\u1EDD\u1EDB\u1EE1\u1EDF\u1EE3\u1ECD\u1ED9\u01EB\u01ED\u00F8\u01FF\u0254\uA74B\uA74D\u0275]/g
}, {
    base: "oi",
    letters: /[\u01A3]/g
}, {
    base: "ou",
    letters: /[\u0223]/g
}, {
    base: "oo",
    letters: /[\uA74F]/g
}, {
    base: "p",
    letters: /[\u0070\u24DF\uFF50\u1E55\u1E57\u01A5\u1D7D\uA751\uA753\uA755]/g
}, {
    base: "q",
    letters: /[\u0071\u24E0\uFF51\u024B\uA757\uA759]/g
}, {
    base: "r",
    letters: /[\u0072\u24E1\uFF52\u0155\u1E59\u0159\u0211\u0213\u1E5B\u1E5D\u0157\u1E5F\u024D\u027D\uA75B\uA7A7\uA783]/g
}, {
    base: "s",
    letters: /[\u0073\u24E2\uFF53\u00DF\u015B\u1E65\u015D\u1E61\u0161\u1E67\u1E63\u1E69\u0219\u015F\u023F\uA7A9\uA785\u1E9B]/g
}, {
    base: "t",
    letters: /[\u0074\u24E3\uFF54\u1E6B\u1E97\u0165\u1E6D\u021B\u0163\u1E71\u1E6F\u0167\u01AD\u0288\u2C66\uA787]/g
}, {
    base: "tz",
    letters: /[\uA729]/g
}, {
    base: "u",
    letters: /[\u0075\u24E4\uFF55\u00F9\u00FA\u00FB\u0169\u1E79\u016B\u1E7B\u016D\u00FC\u01DC\u01D8\u01D6\u01DA\u1EE7\u016F\u0171\u01D4\u0215\u0217\u01B0\u1EEB\u1EE9\u1EEF\u1EED\u1EF1\u1EE5\u1E73\u0173\u1E77\u1E75\u0289]/g
}, {
    base: "v",
    letters: /[\u0076\u24E5\uFF56\u1E7D\u1E7F\u028B\uA75F\u028C]/g
}, {
    base: "vy",
    letters: /[\uA761]/g
}, {
    base: "w",
    letters: /[\u0077\u24E6\uFF57\u1E81\u1E83\u0175\u1E87\u1E85\u1E98\u1E89\u2C73]/g
}, {
    base: "x",
    letters: /[\u0078\u24E7\uFF58\u1E8B\u1E8D]/g
}, {
    base: "y",
    letters: /[\u0079\u24E8\uFF59\u1EF3\u00FD\u0177\u1EF9\u0233\u1E8F\u00FF\u1EF7\u1E99\u1EF5\u01B4\u024F\u1EFF]/g
}, {
    base: "z",
    letters: /[\u007A\u24E9\uFF5A\u017A\u1E91\u017C\u017E\u1E93\u1E95\u01B6\u0225\u0240\u2C6C\uA763]/g
} ], changes;

clickToAddress.prototype.setPlaceholder = function(a, b) {
    if ("init" != this.activeInput && (b = this.activeInput), this.placeholders && "undefined" != typeof b) {
        var c = this.texts.default_placeholder;
        a && (c = this.texts.country_placeholder), b.setAttribute("placeholder", c);
    }
}, clickToAddress.prototype.error = function(a, b) {
    cc_debug && console.warn("CraftyClicks Debug Error Message: [" + a + "] " + b), 
    -1 == this.serviceReady ? this.errorObj.innerHTML = b : this.errorObj.innerHTML = this.texts.generic_error, 
    this.errorObj.className = "c2a_error", "undefined" != typeof this.onError && this.onError(a, b);
}, clickToAddress.prototype.hideErrors = function() {
    -1 != this.serviceReady && (this.errorObj.innerHTML = "", this.errorObj.className = "c2a_error c2a_error_hidden");
}, clickToAddress.prototype.getFocus = function() {
    "init" != this.activeInput && this.activeInput.focus(), this.focused = !0;
}, clickToAddress.prototype.loseFocus = function() {
    "init" != this.activeInput && this.activeInput.blur(), this.focused = !1;
}, clickToAddress.prototype.clear = function() {
    this.resultList.innerHTML = "", this.sid = 0;
}, clickToAddress.prototype.show = function() {
    this.searchObj.style.display = "block", this.visible = !0;
}, clickToAddress.prototype.hide = function(a) {
    return this.keyboardHideInProgress ? void (this.keyboardHideInProgress = !1) : ((a || this.visible && !this.focused && !this.hover) && (this.searchObj.style.display = "none", 
    this.visible = !1, this.hover = !1, this.clear(), this.resetSelector(), this.setPlaceholder(0)), 
    void this.hideErrors());
}, clickToAddress.prototype.attach = function(a) {
    var b = {}, c = [ "search", "postcode", "town", "line_1", "line_2", "company", "county", "country" ];
    switch (this.domMode) {
      case "id":
        for (var d = function(a, b) {
            return "string" == typeof a[b] && "" !== a[b] ? document.getElementById(a[b]) : void 0;
        }, e = 0; e < c.length; e++) b[c[e]] = d(a, c[e]);
        break;

      case "class":
        for (var d = function(a, b) {
            return "string" == typeof a[b] && "" !== a[b] ? document.getElementsByClassName(a[b])[0] : void 0;
        }, e = 0; e < c.length; e++) b[c[e]] = d(a, c[e]);
        break;

      case "name":
        for (var d = function(a, b) {
            return "string" == typeof a[b] && "" !== a[b] ? document.getElementsByName(a[b])[0] : void 0;
        }, e = 0; e < c.length; e++) b[c[e]] = d(a, c[e]);
        break;

      case "object":
        for (var d = function(a, b) {
            return "object" == typeof a[b] && null !== a[b] ? a[b] : void 0;
        }, e = 0; e < c.length; e++) b[c[e]] = d(a, c[e]);
    }
    var f = b.search;
    if ("true" == f.getAttribute("cc_applied")) throw "ClickToAddress already applied to this element!";
    f.setAttribute("cc_applied", "true"), f.setAttribute("autocomplete", "off"), this.setPlaceholder(0, f);
    var g = this.domLib.length;
    this.domLib.push(b);
    var h = this;
    ccEvent(f, "keydown", function(a) {
        if (0 != h.serviceReady) {
            if (38 == a.keyCode || 40 == a.keyCode) {
                if (a.preventDefault(), !h.hasContent) return;
                return void h.moveSelector(40 == a.keyCode);
            }
            13 == a.keyCode && a.preventDefault();
        }
    }), ccEvent(f, "keyup", function(a) {
        if (0 != h.serviceReady) {
            if (27 == a.keyCode) return h.hide(!0), h.loseFocus(), void h.resetSelector();
            var b = [ 37, 38, 39, 40, 33, 34, 35, 36, 42, 44, 45, 16, 17, 18, 19, 20 ];
            if (-1 == b.indexOf(a.keyCode)) {
                if (13 == a.keyCode) {
                    if (a.preventDefault(), !h.hasContent || h.selectorPos < 0) return;
                    var c = h.searchObj.getElementsByTagName("LI")[h.selectorPos];
                    return void (-1 == h.sid ? h.selectCountry(c.getAttribute("countryCode")) : h.select(c));
                }
                if (-1 == h.sid) h.changeCountry(this.value); else {
                    0 !== this.value.indexOf(h.lastSearch) && (h.activeFilters = {}), h.lastSearch = this.value;
                    var d = new Date().getTime() / 1e3;
                    h.sid = d;
                    var e = this.value;
                    setTimeout(function() {
                        h.sidCheck(d) && ("" !== e ? (h.cleanHistory(), h.search(e, h.activeFilters, d)) : h.clear());
                    }, 250), h.activeDom = h.domLib[g], h.gfxModeTools.reposition(h, f);
                }
            }
        }
    }), ccEvent(f, "focus", function() {
        h.onFocus(f);
    }), ccEvent(f, "blur", function() {
        0 != h.serviceReady && (h.focused = !1, h.hide());
    }), f === document.activeElement && this.onFocus(f);
}, clickToAddress.prototype.onFocus = function(a) {
    var b = this;
    if (0 == b.serviceReady) return void setTimeout(function() {
        b.onFocus(a);
    }, 250);
    var c = b.visible;
    b.gfxModeTools.reposition(b, a), b.activeInput = a, b.focused = !0, b.show(), "" === a.value || c || b.search(a.value);
}, clickToAddress.prototype.resetSelector = function() {
    this.hasContent = !1, this.selectorPos = -1;
}, clickToAddress.prototype.moveSelector = function(a) {
    if (this.visible) {
        var b = this.searchObj.getElementsByTagName("LI");
        a && this.selectorPos + 1 < b.length && this.selectorPos++, !a && this.selectorPos - 1 >= 0 && this.selectorPos--;
        for (var c = 0; c < b.length; c++) c != this.selectorPos ? b[c].className = b[c].className.replace(" active", "") : -1 == b[c].className.indexOf("active") && (b[c].className = b[c].className + " active");
        var d = 30 * (this.selectorPos + 1), e = this.searchObj.getElementsByTagName("UL")[0];
        d > e.offsetHeight + e.scrollTop && (e.scrollTop = d - e.offsetHeight), d <= e.scrollTop && (e.scrollTop = d - 30);
    }
}, clickToAddress.prototype.showGeo = function() {
    this.searchObj.getElementsByClassName("geo")[0].style.display = "block";
}, clickToAddress.prototype.hideKeyboard = function() {
    var a = this;
    a.keyboardHideInProgress = !0, a.activeInput.setAttribute("readonly", "readonly"), 
    a.activeInput.setAttribute("disabled", "true"), setTimeout(function() {
        a.activeInput.blur(), a.activeInput.removeAttribute("readonly"), a.activeInput.removeAttribute("disabled");
    }, 100);
}, clickToAddress.prototype.getStyleSheet = function() {
    if (this.cssPath !== !1) {
        var a = "crafty_css";
        if (!document.getElementById(a)) {
            var b = document.getElementsByTagName("head")[0], c = document.createElement("link");
            c.id = a, c.rel = "stylesheet", c.type = "text/css", c.href = this.cssPath, c.media = "all", 
            b.appendChild(c);
        }
    }
}, clickToAddress.prototype.setProgressBar = function(a) {
    var b = this.searchObj.getElementsByClassName("progressBar")[0];
    switch (a) {
      case 0:
        b.className = "progressBar action", b.style.width = "50%", setTimeout(function() {
            "progressBar action" == b.className && (b.className = "progressBar", b.style.width = "0%");
        }, 5e3);
        break;

      case 1:
        b.className = "progressBar finish", b.style.width = "100%", setTimeout(function() {
            b.className = "progressBar", b.style.width = "0%";
        }, 2e3);
    }
};